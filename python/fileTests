#!/usr/bin/env bash

# FIXME (sw, 2021-09-16): we should migrate this mess to tests/integrationTests.py!

set -e

cd $(dirname $0)

d=$(pwd)
t=$(mktemp)

if [ "$1" == "--help" ]; then
    echo "USAGE: $0 [--start-at] [FILE]"
    exit 1
fi

startAt=false
if [ "$1" == "--start-at" ]; then
    startAt=true
    shift
fi
FILE="$1"

started=false

function skip()
{
    # return 1 if test should be run
    # return 0 if test should be skipped
    if [ ! -z "$FILE" ]; then
        if [ "$startAt" == true -a "$started" == true ]; then
            return 1
        fi
        if [ "$FILE" == "$1" ]; then
            started=true
            return 1
        fi
        return 0
    else
        return 1
    fi
}

echo "Running file tests, siteDir=$siteDir ..."
echo "Writing logs to $t"

#PY="coverage run --append"
PY=python3

function check()
{
    if skip "$1"; then
        return
    fi
    echo "Checking with $1"
    pushd /tmp > /dev/null
    dir=$(mktemp -d)
    echo "Installing into $dir ..."
    echo "Run 1"
    PYTHONPATH=$dir WYPP_INSTALL_DIR=$dir $PY $d/src/runYourProgram.py --install-mode install --quiet --check $d/"$1" >> "$t"
    rm -rf "$dir"
    mkdir "$dir"
    echo "Run 2"
    PYTHONPATH=$dir WYPP_INSTALL_DIR=$dir $PY $d/src/runYourProgram.py --install-mode install --quiet --check $d/"$1" >> "$t"
    echo "Run 3"
    PYTHONPATH=$dir WYPP_INSTALL_DIR=$dir $PY $d/src/runYourProgram.py --check --install-mode assertInstall --quiet $d/"$1" >> "$t"
    rm -f "$dir/untypy/__init__.py"
    echo "Run 4"
    PYTHONPATH=$dir WYPP_INSTALL_DIR=$dir $PY $d/src/runYourProgram.py --install-mode install --quiet --check $d/"$1" >> "$t"
    echo "Run 5"
    PYTHONPATH=$dir WYPP_INSTALL_DIR=$dir $PY $d/src/runYourProgram.py --check --install-mode assertInstall --quiet $d/"$1" >> "$t"
    popd > /dev/null
    rm -rf "$dir"
}
check test-data/fileWithImport.py
check test-data/fileWithoutImport.py
check test-data/fileWithBothImports.py
check test-data/fileWithRecursiveTypes.py

version=$(python3 -V | sed 's/Python //g' | sed 's/\.[^.]*$//g')
fullVersion=$(python3 -V | sed 's/Python //g')

function fix_output()
{
    sed 's/at 0x[0-9a-f][0-9a-f]*>/at 0x00>/g' | \
        sed 's|  File "/[^"]*"|  File ""|g'
}

# First argument: whether to do type checking or not
# Second argument: expected exit code. If given as X:Y, then X is the exit code with active
#   type checking, and Y is the exit code without type checking.
# Third argument: input file
# The remaining arguments are passed to src/runYourProgram.py
function checkWithOutputAux()
{
    local tycheck="$1"
    local expectedEcode=$2
    local file="$3"
    if skip "$file"; then
        return
    fi
    echo "Checking $file"
    shift 3
    tycheckOpt=""
    suffixes="${fullVersion} ${version}"
    if [ "$tycheck" == "no" ]; then
        tycheckOpt="--no-typechecking"
        suffixes="${fullVersion}-notypes ${fullVersion} ${version}-notypes ${version} notypes"
    fi
    if echo "$expectedEcode" | grep ':' > /dev/null; then
        if [ "$tycheck" == "no" ]; then
            expectedEcode=$(echo "$expectedEcode" | sed 's/^.*://g')
        else
            expectedEcode=$(echo "$expectedEcode" | sed 's/:.*$//g')
        fi
    fi
    local expectedOut="${file%.py}.out"
    if [ ! -f "$expectedOut" ]; then
        echo "File $expectedOut does not exist"
        exit 1
    fi
    local expectedErr="${file%.py}.err"
    if [ ! -f "$expectedErr" ]; then
        echo "File $expectedErr does not exist"
        exit 1
    fi
    for suf in $suffixes; do
        if [ -e "${expectedOut}-${suf}" ]; then
            expectedOut="${expectedOut}-${suf}"
        fi
        if [ -e "${expectedErr}-${suf}" ]; then
            expectedErr="${expectedErr}-${suf}"
        fi
    done
    local t=$(mktemp)
    local out=$t.out
    local err=$t.err
    local errtemp=$t.errtemp
    local outtemp=$t.outtemp
    set +e
    echo "Checking $file (typecheck: $tycheck)"
    local p=$d/site-lib
    if [ ! -z $PP ]; then
        p=$p:$PP
    fi
    PYTHONPATH=$p $PY $d/src/runYourProgram.py --quiet $tycheckOpt "$file" "$@" 2>> "$errtemp" > "$outtemp"
    ecode=$?
    set -e
    cat "$errtemp" | fix_output > "$err"
    cat "$outtemp" | fix_output > "$out"
    if [ $ecode != $expectedEcode ]; then
        echo "Expected exit code $expectedEcode got $ecode for test $file"
        echo "Stderr:"
        cat "$err"
        echo "Stdout:"
        cat "$out"
        exit 1
    fi
    if ! diff -u $expectedOut $out; then
        echo "Wrong output on stdout for $file ($expectedOut contains the expected output)"
        echo "Full output: $out"
        exit 1
    fi
    if ! diff -u $expectedErr $err; then
        echo "Wrong output on stderr for $file ($expectedErr contains the expected output)"
        echo "Full output: $err"
        exit 1
    fi
    rm -f "$out"
    rm -f "$err"
}

function checkWithOutput()
{
    checkWithOutputAux yes "$@"
    checkWithOutputAux no "$@"
}

checkWithOutput 1 test-data/testTraceback.py
checkWithOutput 1 test-data/testTraceback2.py
checkWithOutput 1 test-data/testTraceback3.py
checkWithOutput 0 test-data/testArgs.py ARG_1 ARG_2
checkWithOutput 0 test-data/printModuleName.py
checkWithOutput 0 test-data/printModuleNameImport.py
checkWithOutput 1 test-data/testTypes1.py
checkWithOutput 1 test-data/testIndexError.py
checkWithOutput 1 test-data/testWrapperError.py
checkWithOutput 0 test-data/testCheckFail.py
checkWithOutput 1:0 test-data/testTypes2.py
checkWithOutputAux yes 1 test-data/testABCMeta.py
checkWithOutputAux yes 0 test-data/testClassHierarchy.py
checkWithOutputAux yes 1 test-data/testTypesCollections1.py
checkWithOutputAux yes 1 test-data/testTypesCollections2.py
checkWithOutputAux yes 1 test-data/testTypesCollections3.py  # see #5
checkWithOutputAux yes 1 test-data/testTypesCollections4.py
checkWithOutputAux yes 1 test-data/testTypesProtos1.py
checkWithOutputAux yes 1 test-data/testTypesProtos2.py
checkWithOutputAux yes 1 test-data/testTypesProtos3.py
checkWithOutputAux yes 1 test-data/testTypesProtos4.py
checkWithOutputAux yes 1 test-data/testTypesSubclassing1.py
checkWithOutputAux yes 1 test-data/testTypesHigherOrderFuns.py
checkWithOutputAux yes 0 test-data/testTypesHigherOrderFuns2.py # see #6
checkWithOutputAux yes 1 test-data/testTypesHigherOrderFuns3.py
checkWithOutputAux yes 0 test-data/testTypesHigherOrderFuns4.py
checkWithOutputAux yes 0 test-data/testTypesHigherOrderFuns5.py
checkWithOutputAux yes 1 test-data/testTypesRecordInheritance.py
checkWithOutputAux yes 1 test-data/testRecordSetTypes.py
checkWithOutputAux yes 1 test-data/testRecordSetTypeForwardRef.py
checkWithOutputAux yes 0 test-data/testForwardRef.py
checkWithOutputAux yes 0 test-data/testForwardRef1.py
checkWithOutputAux yes 1 test-data/testForwardRef2.py
checkWithOutputAux yes 0 test-data/testForwardRef3.py
checkWithOutputAux yes 1 test-data/testForwardRef4.py
checkWithOutputAux yes 1 test-data/testForwardRef5.py
checkWithOutputAux yes 0 test-data/testForwardRef6.py
checkWithOutputAux yes 1 test-data/testHintParentheses1.py
checkWithOutputAux yes 1 test-data/testHintParentheses2.py
checkWithOutputAux yes 1 test-data/testHintParentheses3.py
checkWithOutputAux yes 1 test-data/testTypesReturn.py
checkWithOutputAux yes 1 test-data/testMissingReturn.py
checkWithOutputAux yes 1 test-data/testTypesSequence1.py
checkWithOutputAux yes 1 test-data/testTypesSequence2.py
checkWithOutputAux yes 1 test-data/testTypesTuple1.py
checkWithOutputAux yes 1 test-data/wrong-caused-by.py
checkWithOutputAux yes 1 test-data/declared-at-missing.py
checkWithOutputAux yes 1 test-data/testTypesSet1.py
checkWithOutputAux yes 1 test-data/testTypesSet2.py
checkWithOutputAux yes 1 test-data/testTypesSet3.py
checkWithOutputAux yes 1 test-data/testTypesSet4.py
checkWithOutputAux yes 1 test-data/testTypesDict1.py
checkWithOutputAux yes 1 test-data/testTypesDict2.py
checkWithOutputAux yes 1 test-data/testTypesDict3.py
checkWithOutputAux yes 1 test-data/testTypesDict4.py
checkWithOutputAux yes 1 test-data/testIterableImplicitAny.py
checkWithOutputAux yes 0 test-data/testDoubleWrappingDicts.py
checkWithOutputAux yes 0 test-data/testClassRecursion.py
checkWithOutputAux yes 1 test-data/testWrongNumOfArguments.py
checkWithOutputAux yes 1 test-data/testWrongNumOfArguments2.py
checkWithOutputAux yes 0 test-data/testLiteralInstanceOf.py
checkWithOutputAux yes 1 test-data/testWrongKeywordArg.py
checkWithOutputAux yes 1 test-data/testWrongKeywordArg2.py
checkWithOutputAux yes 0 test-data/testComplex.py
checkWithOutputAux yes 0 test-data/testUnionLiteral.py
checkWithOutputAux yes 0 test-data/testCheck.py
checkWithOutputAux yes 0 test-data/testNameErrorBug.py
checkWithOutputAux yes 0 test-data/testOriginalTypeNames.py
checkWithOutputAux yes 0 test-data/testDeepEqBug.py
checkWithOutputAux yes 1 test-data/testLockFactory.py
checkWithOutputAux yes 1 test-data/testLockFactory2.py
checkWithOutputAux yes 1 test-data/testGetSource.py
checkWithOutputAux yes 0 test-data/testDict.py #see #87
checkWithOutputAux yes 0 test-data/testFunEq.py #see #78
checkWithOutputAux yes 0 test-data/testBugSliceIndices.py #see #92
checkWithOutputAux yes 0 test-data/testABC.py
checkWithOutputAux yes 0 test-data/testTypesWrapperEq.py
checkWithOutputAux yes 0 test-data/testTypesProtos5.py
checkWithOutputAux yes 1 test-data/testTypesProtos6.py
checkWithOutputAux yes 1 test-data/testTypesProtos7.py
checkWithOutputAux yes 1 test-data/testTypesProtos8.py
checkWithOutputAux yes 1 test-data/testTypesProtos9.py
checkWithOutputAux yes 0 test-data/testIterable1.py
checkWithOutputAux yes 0 test-data/testIterable2.py
checkWithOutputAux yes 0 test-data/testIterable3.py
checkWithOutputAux yes 0 test-data/testIterable4.py
checkWithOutputAux yes 0 test-data/testIterable5.py
checkWithOutputAux yes 0 test-data/testIterable6.py
checkWithOutputAux yes 1 test-data/testIterable7.py
checkWithOutputAux yes 0 test-data/testIterator.py
checkWithOutputAux yes 0 test-data/testIterator2.py
checkWithOutputAux yes 0 test-data/testIterator3.py
checkWithOutputAux yes 0 test-data/testIterator4.py
checkWithOutputAux yes 0 test-data/testConcat.py
checkWithOutputAux yes 0 test-data/testCopy.py
checkWithOutputAux yes 0 test-data/testHof.py
checkWithOutputAux yes 0 test-data/testIndexSeq.py
checkWithOutputAux yes 0 test-data/testWrap.py
checkWithOutputAux yes 0 test-data/testWrap2.py
checkWithOutputAux yes 1 test-data/testTodo.py
checkWithOutputAux yes 1 test-data/testImpossible.py
checkWithOutputAux yes 1 test-data/testInvalidLiteral.py
checkWithOutputAux yes 0 test-data/admin.py
PP=test-data/modules/B checkWithOutputAux yes 1 test-data/modules/A/main.py \
  --extra-dir test-data/modules/B
checkWithOutputAux yes 0 test-data/testUnion.py
checkWithOutputAux yes 0 test-data/testUnion2.py
checkWithOutputAux yes 0 test-data/testUnion3.py
checkWithOutputAux yes 1 test-data/testLiteral1.py
checkWithOutputAux yes 0 test-data/testForwardTypeInRecord.py
checkWithOutputAux yes 0 test-data/testForwardTypeInRecord2.py
checkWithOutputAux yes 0 test-data/testUnionOfUnion.py
checkWithOutputAux yes 1 test-data/testRecordTypes.py
checkWithOutputAux yes 0 test-data/testDisappearingObject_01.py
checkWithOutputAux yes 0 test-data/testDisappearingObject_02.py

function is_min_version()
{
    min="$1"
    v="$2"
    smaller=$(echo -e "$min\n$v" | sort -V | head -1)
    if [ "$smaller" == "$min" ]; then
        return 0;
    else
        return 1;
    fi
}
version=$(python3 --version | sed 's/Python //g')

if is_min_version "3.12" "$version"; then
    checkWithOutput 0 test-data/testTypeKeyword.py
fi
